% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created by Omoniyi Temidayo Andrew
%
% Graduated of Federal University of Technology Akure

% This script assumes these variables are defined:
%
%   input2 - input data.
%   target2 - target data.

x = input2;
t = target2;

%Firstly we create a Neural Network using the FeedForward function
net = newff(minmax(x),[16,1],{'logsig','purelin','trainscg'});
% logsig= activation, purelin=output fuction, trainlm= training function

%setting the network parameters
net.trainparam.epochs = 1000;
net.trainparam.goal = 1e-25;
net.trainparam.lr = 0.01;

net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};
net.divideFcn = 'dividerand';
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

%net.performFcn = 'crossentropy';  % Cross-Entropy
net.plotFcns = {'plotperform','plottrainstate','ploterrhist','plotconfusion', 'plotroc'};
[net,tr] = train(net,x,t);

y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

tind = vec2ind(target2);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);
trainTargets = t .* tr.trainMask{1};

trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)

valPerformance = perform(net,valTargets,y)

testPerformance = perform(net,testTargets,y)

view(net)

y = net(testsample);
